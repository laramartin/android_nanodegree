/*

We used the Gradle wrapper way back at the start of this class to run our
first task, before we had even installed Gradle. That's a pretty cool party
trick, but the real strength of the wrapper is that you can put your build
tool under version control, so everyone building your project is building it
with the exact same tool.

The Gradle wrapper is comprised of four files. A JAR, a properties file, and a
pair of scripts, a shell script for Unix and Mac, and a batch script for
Windows. When you pass a command to one of these scripts, it will first check
if Gradle is installed, download it if necessary, then execute your command.

A wrapper can be created by running the built-in 'wrapper' task. The wrapper
scripts are placed in the root of your project directory and the other files
in the 'gradle/wrapper' directory.

We can now run our Gradle build using the wrapper. We use the wrapper
identically to how we would the 'gradle' command.

    $ ./gradlew tasks

If this is the first time using the wrapper, it will go ahead and download the
appropriate Gradle distribution and cache it locally. We can also explicitly
configure what version of Gradle to use by setting the `gradleVersion`
property on the 'wrapper' task. Let's set the version to '2.2' and run the
'wrapper' task again.

*/

wrapper {
    gradleVersion = '2.2'
}

/*

If we haven't already downloaded this particular version of Gradle, the
wrapper will do so for us. Let's run the wrapper with the '--version' option
to confirm we are using the correct version.

    $ ./gradlew --version

As you can see, the wrapper is now using version 2.2 of Gradle. This
information is saved in the gradle-wrapper.properties file in the
'gradle/wrapper' directory. We can also set the wrapper version by modifying
this file. Let's set the version back to 2.3 by changing the value of of the
`distributionUrl` property.

Let's run the wrapper with the '--version' option and verify the
result.

    $ ./gradlew --version

The version is now 2.3. This is a really important feature, as it allows us to
centrally control what version of Gradle is used to build our project. In
practice, the Gradle wrapper files, to include the scripts, jar and properties
file, will be committed to source control. This serves two main functions.
First, it means that everything that is needed to get up and running with
development of our project is included in the source repository. Second, it
means that the Gradle version is also version controlled, which eliminates the
possibility that a developer encounters problems with the build due to using
the wrong version of Gradle.

 */
