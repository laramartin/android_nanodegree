/*

One very useful Gradle feature is the ability to declare dependencies on artifacts that are created by other Gradle projects, in much the same way that dependencies can be declared on artifacts that live in repositories.

An artifact is just a fancy way of saying some sort of file, usually an archive like a ZIP or a JAR.

Below, we have configured two gradle projects. The `projA` project creates a ZIP, and declares that it has a configuration called `docs`, which is generated by the output of the `zip` task.

Then `projB` declares that it has a dependency on the `docs` configuration of `projA`, which allows it to access and manipulate the `zip` that `projA` created. Also, if you run the `copyDeps` task from `projB`, the task dependency on `zip` will be inferred!

For more info about artifact management, check out:

https://docs.gradle.org/current/userguide/artifact_management.html


*/


// Add the 'base' plugin to all our projects to get some
// sensible defaults such as 'clean' task and zip file names.
allprojects {
    apply plugin: 'base'
}

// Configure 'projA' to add a new task which creates a zip archive.
project(':projA') {

    configurations {
        docs
    }

    task zip(type: Zip) {
        from 'foo.txt'
    }

    artifacts {
        docs zip
    }
}

// Configure 'projB' to depend on the zip file created by 'projA'.
project(':projB') {

    configurations {
        deps
    }

    dependencies {
        // create a dependency to 'projA' 'docs' configuration.
        deps project(path: ':projA', configuration: 'docs')
    }

    task copyDeps(type: Copy) {
        from configurations.deps
        into "$buildDir/deps"
    }
}
