/*

So far, the only option we've seen for adding custom functionality to our
build script is via ad-hoc tasks. We've also seen how typed tasks make it
simple to reuse common functionality throughout our build scripts. We will now
learn how to write our own task types. Creating a custom task type in Gradle
is easy. Let's start by defining our task class. Again, since Gradle scripts
are simply Groovy scripts, we can define a class right in our build script.
In general we will always extend the `DefaultTask` class, which provides a
basic implementation of the `Task` interface.

 */

class MyTask extends DefaultTask {}

/*

That's all there is to it to define a custom task type. Of course, since we
didn't provide any additional capability for our task it's functionally the
same as defining an ad-hoc task in a build script. We have to somehow tell
Gradle what we want our task to do when it executes. Luckily, Gradle has also
made this very simple. To add an action to our task type, we simply define a
method annotated with the `@TaskAction` annotation. Let's start by adding an
action that simply prints a string out to the console.

*/

class HelloTask extends DefaultTask {
    @TaskAction
    void doAction() {
        println 'Hello World'
    }
}

/*

Now that we've defined our task and given it an action, we can create an
instance of this task in our build script just as we would any other typed
task. Let's go ahead and add a task named "hello" to our build script and
declare it's type as the new class we've just created. We can then run this
task from the Gradle command line and see that the `doAction()` method is
called when the task is executed.

*/

task hello(type: HelloTask)

/*

We can also easily make our tasks configurable by adding properties to our
class. Let's add a "firstName" property which our task action will use.
Remember, since this is Groovy we don't need to worry about creating getter
and setter methods.

*/

class HelloNameTask extends DefaultTask {
    String firstName

    @TaskAction
    void doAction() {
        println "Hello, $firstName"
    }
}

/*

Let's use our new configurable task to print a custom value out to the
console.

*/

task helloName(type: HelloNameTask) {
    firstName = 'Jeremy'
}

/*

For more info, check out chapter 58 of the Gradle user guide:

https://docs.gradle.org/current/userguide/custom_tasks.html

*/
