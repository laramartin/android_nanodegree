/*

You may often come across situations where there's a part of your build script
that you'll want to change somewhat regularly. While you're well on your way
to being a build master, the other developers using your build might not be so
familiar with Gradle. This is especially true if you expect an automated
system to be running your build.

Gradle allows you to parametrize your build by adding properties to the
project object from outside your build script. There are two main ways to do
this: a gradle.properties file, and command line arguments.

Let's create a task that prints a greeting.

*/

task printGreeting {
    doLast {
       println greeting
    }
}

/* If we just run that as is, we get the following error:

    * What went wrong:
    Execution failed for task ':printGreeting'.
    > Could not find property 'greeting' on task ':printGreeting'.

Oh right. We need to pass in the value of the greeting we want to use. Let's
first do this using a gradle.properties file. We'll create that file, and add
the line:

    greeting = "Hello from a properties file"

Now if we run `printGreeting` again, we get the output we expect. The other
way to set properties is on the command line. Let's run

    gradle -Pgreeting="Hello from the command line" pG

Note that the `greeting` property is now defined in two places, the
gradle.properties file, and from the command line. The command line value
overrides the value in the properties file.

There's a third way to use Gradle properties, and that's from inside the build
script. We can pass a closure to project.ext (for "extra properties") to
define properties with the same syntax as in the gradle.properties file. Note
that properties defined this way shadow all other definitions.

*/

ext {
    greeting = "Hello from inside the build script"
}

/*

Side note, you can also set properties via system environment variables. Check
out the following section of the user guide for more info:

https://docs.gradle.org/current/userguide/userguide_single.html#build_environment

*/
