/*

Now that we have some Groovy under our belts, we're in a much better position
to understand what's going on in a Gradle build script. Just like a closure
can have a delegate object, the entire build script delegates to a project
object. All the keywords in the Gradle DSL are properties of, or methods on,
the project object.

For instance, the project object has a method called `task` for declaring
tasks. It accepts a name of a new task and a configuration closure, which
we'll talk about shortly.

*/

project.task("myTask1")

/*

Since the entire build script delegates to `project`, we can leave that
off.

*/

task("myTask2")

/*

Because Groovy syntax is awesome, we can leave off the parentheses.

*/

task "myTask3"

/*

This next part is a little tricky. Gradle uses an advanced Groovy feature to
change how the syntax of task declaration is compiled. The upshot is that we
can knock off the quotes.

For more info, check out Mark's post on Stack Overflow here:

http://stackoverflow.com/questions/27584463/understing-the-groovy-syntax-in-a-gradle-task-definition

*/

task myTask4

/*

Here we have the standard way to declare a task. Since the task is a Groovy
object we can set its properties and access its methods. Let's add a
description and a group to this task.

*/

myTask4.description = "This is what's shown in the task list"
myTask4.group = "This is the heading for this task in the task list,"

/*

The most important property of a task is the list of actions it will perform.
Instead of setting the `actions` property of our task, we can add a closure to
the end of the list using the `doLast` method.

*/

myTask4.doLast {println "Do this last"}

/*

We can also add actions to the start of the list using `doFirst`.

*/

myTask4.doFirst {println "Do this first"}

/*

Instead of declaring a task and then setting its properties afterwards, we can
also give the task a configuration closure when it's declared.

*/

task myTask6 {
    description "Here's a task with a configuration block"
    group "Some group"
    doLast {
        println "Here's the action"
    }
}

/*

There are two important things to know to understand this configuration
closure. The first is that when this closure is evaluated, its delegate is the
task object. That means when you're assigning to `group`, you're really
assigning to `task.group`. The second thing is that the properties of the task
object are decorated with setters with the same names. That's how we can omit
equals signs when we're to assigning to properties. We're really calling a
setter and leaving off the parentheses.

The only gotcha is that you must include the equals sign or parentheses when
assigning a collection to a property.

*/

task myTask7 {
    description("Description") // Function call works
    //description "Description" // This is identical to the line above
    group = "Some group" // Assignment also works
    doLast { // We can also omit the parentheses, because Groovy syntax
        println "Here's the action"
    }
}

/*

One more important piece of syntax. There are some task properties you can set
using the following syntax:

*/

task myTask8(description: "Another description") {
    doLast {
        println "Doing something"
    }
}

/*

Not all task properties can be set this way, however. Check out this list for
the complete story:

https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskContainer.html#create(java.util.Map)

The choice to set properties here or in the configuration block or even later
on in the script is mostly up to readability, except for one case. If you are
giving your task a type, that needs to be declared here, and not in a
configuration block. We'll talk more task types that when we work with file
system tasks.

*/
