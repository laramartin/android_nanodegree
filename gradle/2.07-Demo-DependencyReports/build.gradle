/*

Gradle provides a two ways to visualize dependencies: a traditional dependency
report showing the complete graph of dependencies, and a dependency insight
report showing how a particular dependency is included in your project.

*/

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework:spring-core:4.1.1.RELEASE'
}

/*

Here we have a simple Java project with a single dependency on the spring core
library. We can generate a dependency report by running the 'dependencies'
task.

    $ gradle dependencies

Gradle displays the project dependencies, including transitive dependencies.
The report also breaks out dependencies by each configuration. To see the
dependencies for a particular configuration we can use the '--configuration'
command-line option.

    $ gradle dependencies --configuration runtime

The dependency insight report shows how a particular dependency is included in
our project. This report is especially helpful when identifying version
conflicts. To run the 'dependencyInsight' task we need to specify the
dependency we're interested in using the '--dependency' command-line option.

Let's run an insight report on the 'commons-logging' dependency.

    $ gradle dependencyInsight --dependency commons-logging

We can tell from our report that 'commons-logging' is a
dependency of 'spring-core', which in turn is one of our project's compile
dependencies.

We mentioned that one of main usages of dependency reports is to help identify
dependency conflicts. Let's know introduce a conflict and see how this affects
the output of our reports. Let's add an explicit dependency to version 1.2 of
the 'commons-logging' library to our project.

*/

dependencies {
    compile 'commons-logging:commons-logging:1.2'
}

/*

Let's start by running the dependencies task again.

    $ gradle dependencies

'commons-logging' is now listed twice in our dependency report. You can see
that our project depends on version 1.2, where as 'spring-core' depends on
version 1.1.3. This introduces a conflict, which Gradle will then attempt to
resolve. By default, Gradle resolves version conflicts to the newest version,
in this case 1.2. In our report this is indicated with the arrow, showing us
that version 1.2 is being chosen over 1.1.3.

We can get similar information from the dependency insight report.

    $ gradle dependencyInsight --dependency commons-logging

Again we can see that the commons-logging is shown twice, once as a direct dependency of compile, and once as a transitive dependency of spring core.

*/
