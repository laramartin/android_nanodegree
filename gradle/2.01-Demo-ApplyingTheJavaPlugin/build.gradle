/*

Applying the Java plugin is simple, we need only add a single line to our
build script.

*/

apply plugin: "java"



/*

Now if we run

    gradle tasks --all

We find a wealth of capabilities that Gradle can handle for us! There are four
main tasks we'll use most often: assemble, check, build, and clean.

Assemble creates the output we're interested in. This is usually a JAR, but
can also be more interesting artifacts. Check runs any tests we've set up.
Build depends on both assemble and check. Finally, clean deletes all the build
output.

We've got a trivial Java project in this folder, with a single Person class.
Let's try running

    gradle assemble

Looking at the newly created /build directory, we see where our compiled
Person.class, and we can also find our JAR.

You might be thinking to yourself "I thought there wasn't going to be any
magic. This sure seems like magic... How did Gradle know where to find my
source code?"

I promise there's no magic. Gradle just has a lot of very sensible defaults,
like, for instance, it assumes that your Java sources live in a folder named
`src/main/java`. This, like most everything else in Gradle, can be configured,
and we'll show how shortly.

There's another important thing to know how to do, and that's run the project
we just built. You might have noticed that the Java plugin doesn't add any
tasks for running your code, and that's because the JavaExec task is already
part of the core Gradle functionality.

*/


task execute(type: JavaExec) {
    main = "com.udacity.gradle.Person"
    // We'll talk about this shortly
    classpath = sourceSets.main.runtimeClasspath
}

/*

The `main` property tells the JavaExec task the path of your main class, and
we'll talk more about the classpath very shortly.

There's a number of resources that it would be a great idea to take a look at.
The first is the Gradle Java Quickstart guide

https://docs.gradle.org/current/userguide/tutorial_java_projects.html

The Gradle user guide also has much more in-depth documentation on the Gradle
plugin:

https://docs.gradle.org/current/userguide/java_plugin.html

Finally, check out the Gradle DSL reference for more info on the JavaExec task
type:

https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html

*/
